name: Build and Deploy

on:
  push:
    branches: [ production ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'main'
        type: choice
        options:
          - main
          - production

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: coenttb-com-server
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
      
      - name: Configure Git
        run: |
          git config --global user.name "${{ secrets.GH_USER }}"
          git config --global url."https://${{ secrets.GH_PAT }}@github.com/".insteadOf "https://github.com/"
      
      # Set up Docker Buildx for advanced caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Cache Swift Package Manager dependencies
      - name: Cache Swift dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/swift
            .build
          key: ${{ runner.os }}-swift-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-
      
      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: |
            swift-builder:latest
            registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web:latest
          build-args: |
            GH_PAT=${{ secrets.GH_PAT }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      
      # Move cache to avoid cache bloat
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      
      - name: Test binary exists
        run: |
          docker run --rm swift-builder:latest test -f /app/Server

      # Deploy steps only run for production
      - name: Install Heroku CLI
        if: github.ref == 'refs/heads/production' || github.event.inputs.environment == 'production'
        run: curl https://cli-assets.heroku.com/install.sh | sh
      
      - name: Set Heroku Stack to Container
        if: github.ref == 'refs/heads/production' || github.event.inputs.environment == 'production'
        run: |
          HEROKU_API_KEY=${{ secrets.HEROKU_API_KEY }} heroku stack:set container --app ${{ secrets.HEROKU_APP_NAME }}
      
      - name: Deploy to Heroku
        if: github.ref == 'refs/heads/production' || github.event.inputs.environment == 'production'
        run: |
          # Log in to Heroku container registry
          echo "${{ secrets.HEROKU_API_KEY }}" | docker login --username=${{ secrets.HEROKU_EMAIL }} --password-stdin registry.heroku.com
          
          # Push the container
          docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web:latest
          
          # Release the container
          HEROKU_API_KEY=${{ secrets.HEROKU_API_KEY }} heroku container:release web --app ${{ secrets.HEROKU_APP_NAME }}
