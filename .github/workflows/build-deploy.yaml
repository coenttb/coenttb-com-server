name: Build and Deploy

on:
  push:
    branches: [ production ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'main'
        type: choice
        options:
          - main
          - production

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: coenttb-com-server
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          clean: true
      
      - name: Configure Git
        run: |
          git config --global user.name "${{ secrets.GH_USER }}"
          git config --global url."https://${{ secrets.GH_PAT }}@github.com/".insteadOf "https://github.com/"
      
      - name: Clean any existing build artifacts
        run: |
          rm -rf .build || true
          docker system prune -f || true
      
      - name: Display build configuration
        run: |
          echo "=== Build Configuration ==="
          echo "Package.swift Swift version:"
          head -1 Package.swift
          echo ""
          echo "Dockerfile Swift version:"
          grep "FROM swift:" Dockerfile
          echo ""
          echo "Dockerfile build command:"
          grep "swift build" Dockerfile
          echo ""
          echo "Dockerfile copy path:"
          grep "\.build/" Dockerfile
          echo "========================="
      
      - name: Verify Dockerfile configuration
        run: |
          echo "Checking Dockerfile uses debug build..."
          if grep -q "swift build --product Server" Dockerfile && grep -q "\.build/debug/" Dockerfile; then
            echo "✅ Dockerfile correctly configured for debug build"
          else
            echo "❌ Dockerfile not configured for debug build"
            exit 1
          fi
      
      - name: Build in Docker (Debug Mode)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          build-args: |
            GH_PAT=${{ secrets.GH_PAT }}
          tags: |
            swift-builder:latest
            registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web:latest
          load: true
          platforms: linux/amd64
          no-cache: true
      
      # Comprehensive testing
      - name: Test binary exists and validate build
        run: |
          echo "Testing if Server binary was built correctly..."
          docker run --rm swift-builder:latest test -f /app/Server || {
            echo "❌ Server binary not found in /app/"
            echo "Contents of /app/:"
            docker run --rm swift-builder:latest ls -la /app/ || true
            exit 1
          }
          echo "✅ Server binary found"
          
          echo "Testing if binary is executable..."
          docker run --rm swift-builder:latest test -x /app/Server || {
            echo "❌ Server binary is not executable"
            exit 1
          }
          echo "✅ Server binary is executable"

      # Deploy steps only run for production
      - name: Install Heroku CLI
        if: github.ref == 'refs/heads/production' || github.event.inputs.environment == 'production'
        run: curl https://cli-assets.heroku.com/install.sh | sh
      
      - name: Set Heroku Stack to Container
        if: github.ref == 'refs/heads/production' || github.event.inputs.environment == 'production'
        run: |
          HEROKU_API_KEY=${{ secrets.HEROKU_API_KEY }} heroku stack:set container --app ${{ secrets.HEROKU_APP_NAME }}
      
      - name: Deploy to Heroku
        if: github.ref == 'refs/heads/production' || github.event.inputs.environment == 'production'
        run: |
          # Log in to Heroku container registry
          echo "${{ secrets.HEROKU_API_KEY }}" | docker login --username=${{ secrets.HEROKU_EMAIL }} --password-stdin registry.heroku.com
          
          # Push the container
          docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web:latest
          
          # Release the container
          HEROKU_API_KEY=${{ secrets.HEROKU_API_KEY }} heroku container:release web --app ${{ secrets.HEROKU_APP_NAME }}
